--- rate_control.c	2011-06-22 23:58:59.000000000 +0800
+++ rate_control.c89.c	2011-06-23 00:06:51.000000000 +0800
@@ -82,7 +82,7 @@
 	const bool		is_nonblocking
 	)
 {
-	int64_t new_major_limit, new_minor_limit;
+	ssize_t new_major_limit, new_minor_limit;
 	pgm_time_t now;
 
 /* pre-conditions */
@@ -104,7 +104,9 @@
 			if (time_since_last_rate_check > pgm_msecs(1)) 
 				new_major_limit = major_bucket->rate_per_msec;
 			else {
+#pragma warning( disable : 4244 )
 				new_major_limit = major_bucket->rate_limit + ((major_bucket->rate_per_msec * time_since_last_rate_check) / 1000UL);
+#pragma warning( default : 4244 )
 				if (new_major_limit > major_bucket->rate_per_msec)
 					new_major_limit = major_bucket->rate_per_msec;
 			}
@@ -115,7 +117,9 @@
 			if (time_since_last_rate_check > pgm_secs(1)) 
 				new_major_limit = major_bucket->rate_per_sec;
 			else {
+#pragma warning( disable : 4244 )
 				new_major_limit = major_bucket->rate_limit + ((major_bucket->rate_per_sec * time_since_last_rate_check) / 1000000UL);
+#pragma warning( default : 4244 )
 				if (new_major_limit > major_bucket->rate_per_sec)
 					new_major_limit = major_bucket->rate_per_sec;
 			}
@@ -152,7 +156,9 @@
 			if (time_since_last_rate_check > pgm_msecs(1)) 
 				new_minor_limit = minor_bucket->rate_per_msec;
 			else {
+#pragma warning( disable : 4244 )
 				new_minor_limit = minor_bucket->rate_limit + ((minor_bucket->rate_per_msec * time_since_last_rate_check) / 1000UL);
+#pragma warning( default : 4244 )
 				if (new_minor_limit > minor_bucket->rate_per_msec)
 					new_minor_limit = minor_bucket->rate_per_msec;
 			}
@@ -163,7 +169,9 @@
 			if (time_since_last_rate_check > pgm_secs(1)) 
 				new_minor_limit = minor_bucket->rate_per_sec;
 			else {
+#pragma warning( disable : 4244 )
 				new_minor_limit = minor_bucket->rate_limit + ((minor_bucket->rate_per_sec * time_since_last_rate_check) / 1000000UL);
+#pragma warning( default : 4244 )
 				if (new_minor_limit > minor_bucket->rate_per_sec)
 					new_minor_limit = minor_bucket->rate_per_sec;
 			}
@@ -210,7 +218,7 @@
 	const bool		is_nonblocking
 	)
 {
-	int64_t new_rate_limit;
+	ssize_t new_rate_limit;
 
 /* pre-conditions */
 	pgm_assert (NULL != bucket);
@@ -220,6 +228,7 @@
 		return TRUE;
 
 	pgm_spinlock_lock (&bucket->spinlock);
+	{
 	pgm_time_t now = pgm_time_update_now();
 
 	if (bucket->rate_per_msec)
@@ -228,7 +237,9 @@
 		if (time_since_last_rate_check > pgm_msecs(1)) 
 			new_rate_limit = bucket->rate_per_msec;
 		else {
+#pragma warning( disable : 4244 )
 			new_rate_limit = bucket->rate_limit + ((bucket->rate_per_msec * time_since_last_rate_check) / 1000UL);
+#pragma warning( default : 4244 )
 			if (new_rate_limit > bucket->rate_per_msec)
 				new_rate_limit = bucket->rate_per_msec;
 		}
@@ -239,7 +250,9 @@
 		if (time_since_last_rate_check > pgm_secs(1)) 
 			new_rate_limit = bucket->rate_per_sec;
 		else {
+#pragma warning( disable : 4244 )
 			new_rate_limit = bucket->rate_limit + ((bucket->rate_per_sec * time_since_last_rate_check) / 1000000UL);
+#pragma warning( default : 4244 )
 			if (new_rate_limit > bucket->rate_per_sec)
 				new_rate_limit = bucket->rate_per_sec;
 		}
@@ -265,6 +278,7 @@
 	} 
 	pgm_spinlock_unlock (&bucket->spinlock);
 	return TRUE;
+	}
 }
 
 PGM_GNUC_INTERNAL
@@ -289,12 +303,14 @@
 	{
 		pgm_spinlock_lock (&major_bucket->spinlock);
 		now = pgm_time_update_now();
+		{
 		const int64_t bucket_bytes = major_bucket->rate_limit + pgm_to_secs (major_bucket->rate_per_sec * (now - major_bucket->last_rate_check)) - n;
 
 		if (bucket_bytes < 0) {
 			const int64_t outstanding_bytes = -bucket_bytes;
 			const pgm_time_t major_remaining = (1000000UL * outstanding_bytes) / major_bucket->rate_per_sec;
-			remaining = major_remaining;
+			 remaining = major_remaining;
+		}
 		}
 	}
 	else
@@ -336,6 +352,7 @@
 		return 0;
 
 	pgm_spinlock_lock (&bucket->spinlock);
+	{
 	const pgm_time_t now = pgm_time_update_now();
 	const pgm_time_t time_since_last_rate_check = now - bucket->last_rate_check;
 	const int64_t bucket_bytes = bucket->rate_limit + pgm_to_secs (bucket->rate_per_sec * time_since_last_rate_check) - n;
@@ -344,10 +361,13 @@
 	if (bucket_bytes >= 0)
 		return 0;
 
+	{
 	const int64_t outstanding_bytes = -bucket_bytes;
 	const pgm_time_t remaining = (1000000UL * outstanding_bytes) / bucket->rate_per_sec;
 
 	return remaining;
+	}
+	}
 }
 
 /* eof */
