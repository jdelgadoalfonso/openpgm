--- thread.c	2011-02-09 05:25:34.000000000 +0800
+++ thread.c89.c	2011-02-09 05:25:50.000000000 +0800
@@ -136,11 +136,13 @@
 
 #ifdef PTHREAD_MUTEX_ADAPTIVE_NP
 /* non-portable but define on Linux & FreeBSD, uses spinlock for 200 spins then waits as mutex */
+	{
 	pthread_mutexattr_t attr;
 	posix_check_cmd (pthread_mutexattr_init (&attr));
 	pthread_mutexattr_settype (&attr, PTHREAD_MUTEX_ADAPTIVE_NP);
 	posix_check_cmd (pthread_mutex_init (&mutex->pthread_mutex, &attr));
 	pthread_mutexattr_destroy (&attr);
+	}
 #elif !defined( _WIN32 )
 	posix_check_cmd (pthread_mutex_init (&mutex->pthread_mutex, NULL));
 #elif defined(CONFIG_HAVE_CRITICAL_SECTION_EX)
@@ -272,8 +274,11 @@
 	WakeAllConditionVariable (&cond->win32_cond);
 #else
 	EnterCriticalSection (&cond->win32_crit);
-	for (unsigned i = 0; i < cond->len; i++)
+	{
+	unsigned i;
+	for (i = 0; i < cond->len; i++)
 		SetEvent (cond->phandle[ i ]);
+	}
 	cond->len = 0;
 	LeaveCriticalSection (&cond->win32_crit);
 #endif /* !_WIN32 */
@@ -304,6 +309,7 @@
 #	if defined(CONFIG_HAVE_WIN_COND)
 	SleepConditionVariableCS (&cond->win32_cond, spinlock, INFINITE);
 #	else
+	{
 	DWORD status;
 	HANDLE event = TlsGetValue (cond_event_tls);
 
@@ -327,7 +333,9 @@
 
 	if (WAIT_TIMEOUT == status) {
 		EnterCriticalSection (&cond->win32_crit);
-		for (unsigned i = 0; i < cond->len; i++) {
+		{
+		unsigned i;
+		for (i = 0; i < cond->len; i++) {
 			if (cond->phandle[ i ] == event) {
 				if (i != cond->len - 1)
 					memmove (&cond->phandle[ i ], &cond->phandle[ i + 1 ], sizeof(HANDLE) * (cond->len - i - 1));
@@ -335,9 +343,11 @@
 				break;
 			}
 		}
+		}
 		win32_check_cmd (WAIT_FAILED != (status = WaitForSingleObject (event, 0)));
 		LeaveCriticalSection (&cond->win32_crit);
 	}
+	}
 #	endif /* !CONFIG_HAVE_WIN_COND */
 }
 #endif /* !_WIN32 */
