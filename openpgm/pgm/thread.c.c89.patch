--- thread.c	2010-12-10 20:58:47.000000000 +0800
+++ thread.c89.c	2010-12-10 21:00:46.000000000 +0800
@@ -121,9 +121,11 @@
 #ifndef _WIN32
 	posix_check_cmd (pthread_mutex_init (&mutex->pthread_mutex, NULL));
 #else
+	{
 	HANDLE handle;
 	win32_check_cmd (NULL != (handle = CreateMutex (NULL, FALSE, NULL)));
 	mutex->win32_mutex = handle;
+	}
 #endif /* !_WIN32 */
 }
 
@@ -135,15 +137,19 @@
 	pgm_assert (NULL != mutex);
 
 #ifndef _WIN32
+	{
 	const int result = pthread_mutex_trylock (&mutex->pthread_mutex);
 	if (EBUSY == result)
 		return FALSE;
 	posix_check_err (result, "pthread_mutex_trylock");
 	return TRUE;
+	}
 #else
+	{
 	DWORD result;
 	win32_check_cmd (WAIT_FAILED != (result = WaitForSingleObject (mutex->win32_mutex, 0)));
 	return WAIT_TIMEOUT != result;
+	}
 #endif /* !_WIN32 */
 }
 
@@ -183,11 +189,13 @@
 	pgm_assert (NULL != spinlock);
 
 #ifndef _WIN32
+	{
 	const int result = pthread_spin_trylock (&spinlock->pthread_spinlock);
 	if (EBUSY == result)
 		return FALSE;
 	posix_check_err (result, "pthread_spinlock_trylock");
 	return TRUE;
+	}
 #else
 	return TryEnterCriticalSection (&spinlock->win32_spinlock);
 #endif /* !_WIN32 */
@@ -262,8 +270,11 @@
 	WakeAllConditionVariable (&cond->win32_cond);
 #else
 	EnterCriticalSection (&cond->win32_spinlock);
-	for (unsigned i = 0; i < cond->len; i++)
+	{
+	unsigned i;
+	for (i = 0; i < cond->len; i++)
 		SetEvent (cond->phandle[ i ]);
+	}
 	cond->len = 0;
 	LeaveCriticalSection (&cond->win32_spinlock);
 #endif /* !_WIN32 */
@@ -294,6 +305,7 @@
 #	if defined(CONFIG_HAVE_WIN_COND)
 	SleepConditionVariableCS (&cond->win32_cond, spinlock, INFINITE);
 #	else
+	{
 	DWORD status;
 	HANDLE event = TlsGetValue (cond_event_tls);
 
@@ -317,7 +329,9 @@
 
 	if (WAIT_TIMEOUT == status) {
 		EnterCriticalSection (&cond->win32_spinlock);
-		for (unsigned i = 0; i < cond->len; i++) {
+		{
+		unsigned i;
+		for (i = 0; i < cond->len; i++) {
 			if (cond->phandle[ i ] == event) {
 				if (i != cond->len - 1)
 					memmove (&cond->phandle[ i ], &cond->phandle[ i + 1 ], sizeof(HANDLE) * (cond->len - i - 1));
@@ -325,9 +339,11 @@
 				break;
 			}
 		}
+		}
 		win32_check_cmd (WAIT_FAILED != (status = WaitForSingleObject (event, 0)));
 		LeaveCriticalSection (&cond->win32_spinlock);
 	}
+	}
 #	endif /* !CONFIG_HAVE_WIN_COND */
 }
 #endif /* !_WIN32 */
@@ -428,7 +444,7 @@
 	bool status = FALSE;
 
 	pgm_assert (NULL != rwlock);
-
+	
 	EnterCriticalSection (&rwlock->win32_spinlock);
 	if (!rwlock->have_writer && !rwlock->want_to_write) {
 		rwlock->read_counter++;
