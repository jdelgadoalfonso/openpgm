--- hashtable.c	2011-06-19 07:35:04.000000000 +0800
+++ hashtable.c89.c	2011-06-19 07:35:16.000000000 +0800
@@ -72,6 +72,7 @@
 	pgm_return_val_if_fail (NULL != hash_func, NULL);
 	pgm_return_val_if_fail (NULL != key_equal_func, NULL);
 
+	{
 	pgm_hashtable_t *hash_table;
   
 	hash_table = pgm_new (pgm_hashtable_t, 1);
@@ -82,6 +83,7 @@
 	hash_table->nodes              = pgm_new0 (pgm_hashnode_t*, hash_table->size);
   
 	return hash_table;
+	}
 }
 
 PGM_GNUC_INTERNAL
@@ -92,8 +94,11 @@
 {
 	pgm_return_if_fail (hash_table != NULL);
 
-	for (unsigned i = 0; i < hash_table->size; i++)
+	{
+	unsigned i;
+	for (i = 0;i < hash_table->size; i++)
 		pgm_hash_nodes_destroy (hash_table->nodes[i]);
+	}
 	pgm_free (hash_table->nodes);
 	pgm_free (hash_table);
 }
@@ -142,8 +147,10 @@
 {
 	pgm_return_val_if_fail (hash_table != NULL, NULL);
   
+	{
 	const pgm_hashnode_t* node = *pgm_hashtable_lookup_node (hash_table, key, NULL);
 	return node ? node->value : NULL;
+	}
 }
 
 PGM_GNUC_INTERNAL
@@ -156,8 +163,10 @@
 {
 	pgm_return_val_if_fail (hash_table != NULL, NULL);
   
+	{
 	const pgm_hashnode_t* node = *pgm_hashtable_lookup_node (hash_table, key, hash_return);
 	return node ? node->value : NULL;
+	}
 }
 
 PGM_GNUC_INTERNAL
@@ -213,11 +222,14 @@
 {
 	pgm_return_if_fail (hash_table != NULL);
 
-	for (unsigned i = 0; i < hash_table->size; i++)
+	{
+	unsigned i;
+	for (i = 0; i < hash_table->size; i++)
 	{
 		pgm_hash_nodes_destroy (hash_table->nodes[i]);
 		hash_table->nodes[i] = NULL;
 	}
+	}
 	hash_table->nnodes = 0;
 	PGM_HASHTABLE_RESIZE (hash_table);
 }
@@ -232,14 +244,22 @@
 					 HASHTABLE_MIN_SIZE, HASHTABLE_MAX_SIZE);
 	pgm_hashnode_t** new_nodes = pgm_new0 (pgm_hashnode_t*, new_size);
   
-	for (unsigned i = 0; i < hash_table->size; i++)
-		for (pgm_hashnode_t *node = hash_table->nodes[i], *next; node; node = next)
+	{
+	unsigned i;
+	for (i = 0; i < hash_table->size; i++)
+	{
+		pgm_hashnode_t *node, *next;
+		for (node = hash_table->nodes[i]; node; node = next)
 		{
 			next = node->next;
+			{
 			const pgm_hash_t hash_val = node->key_hash % new_size;
 			node->next = new_nodes[hash_val];
 			new_nodes[hash_val] = node;
+			}
 		}
+	}
+	}
   
 	pgm_free (hash_table->nodes);
 	hash_table->nodes = new_nodes;
