--- time.c	2011-07-28 11:28:18.000000000 +0800
+++ time.c89.c	2011-07-28 11:32:13.000000000 +0800
@@ -392,6 +392,7 @@
 #elif defined(_WIN32)
 /* core frequency HKLM/Hardware/Description/System/CentralProcessor/0/~Mhz
  */
+		{
 		DWORD registry_mhz = 0;
 		DWORD registry_mhzlen = sizeof (registry_mhz);
 		HKEY hKey;
@@ -412,6 +413,7 @@
 			pgm_minor (_("Registry reports central processor frequency %u MHz"),
 				(unsigned)registry_mhz);
 		}
+		}
 #elif defined(__APPLE__)
 /* nb: RDTSC is non-functional on Darwin */
 		uint64_t cpufrequency;
@@ -515,6 +517,7 @@
 
 /* update Windows timer resolution to 1ms */
 #ifdef _WIN32
+	{
 	TIMECAPS tc;
 	if (TIMERR_NOERROR == timeGetDevCaps (&tc, sizeof (TIMECAPS)))
 	{
@@ -526,6 +529,7 @@
 	{
 		pgm_warn (_("Unable to determine timer device resolution."));
 	}
+	}
 #endif
 
 	return TRUE;
@@ -915,11 +919,15 @@
 /* HPET counter tick period is in femto-seconds, a value of 0 is not permitted,
  * the value must be <= 0x05f5e100 or 100ns.
  */
+	{
 	const uint32_t hpet_period = *((uint32_t*)(hpet_ptr + HPET_COUNTER_CLK_PERIOD));
 	set_hpet_mul (hpet_period);
+	}
 #if defined( __x86_64__ ) || defined( __amd64 )
+	{
 	const uint32_t hpet_caps = *((uint32_t*)(hpet_ptr + HPET_GENERAL_CAPS_REGISTER));
 	hpet_wrap = hpet_caps & HPET_COUNT_SIZE_CAP ? 0 : (1ULL << 32);
+	}
 #else
 	hpet_wrap = 1ULL << 32;
 #endif
