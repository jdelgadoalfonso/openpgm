# -*- mode: python -*-
# OpenPGM build script
# $Id$

Import('env')
e = env.Clone()
if e['WITH_SNMP'] == 'true':
	e.Append(CFLAGS = ['-DCONFIG_WITH_SNMP']);
	e.Append(LIBS = ['libpgmsnmp']);
	e.MergeFlags(e['SNMP_FLAGS']);
if e['WITH_HTTP'] == 'true':
	e.Append(CFLAGS = ['-DCONFIG_WITH_HTTP']);
	e.Append(LIBS = ['libpgmhttp']);
	e.MergeFlags(e['LIBSOUP_FLAGS']);
e.Append(LIBS = ['libpgmex', 'libpgm']);

# core preferred examples
e.Program(['pgmdump.c'])
e.Program(['pgmsend.c'])
e.Program(['pgmrecv.c'])

# sync examples
e.Program(['blocksyncrecv.c'])
e.Program(['snonblocksyncrecv.c'])
e.Program(['pnonblocksyncrecv.c'])

# epoll based examples
if '-DCONFIG_HAVE_EPOLL' in e['CFLAGS']:
	e.Program(['enonblocksyncrecv.c'])
	e.Program(['enonblocksyncrecvmsg.c'])
	e.Program(['enonblocksyncrecvmsgv.c'])

# async examples
e.Program(['asyncqrecv.c'])
e.Program(['blockqrecv.c'])

# ncurses examples
if e['WITH_NCURSES'] == 'true':
	ne = e.Clone()
	ne.Append(LIBS = ['panel', 'ncurses']);
	ne.Program(['pgmtop.c'])

# Google Protocol Buffer example
if e['WITH_PROTOBUF'] == 'true':
	ge = e.Clone();
	newCCFLAGS = [];
	for flag in ge['CCFLAGS']:
		if ("-W" != flag[:2]) and ("-std=gnu99" != flag[:10]) and ("-pedantic" != flag[:9]):
			newCCFLAGS.append(flag);
	ge['CCFLAGS'] = newCCFLAGS;
	ge.Append(CPPPATH = ['/miru/projects/protobuf/protobuf-2.1.0/src', '.']);
	ge.Depends('pgmping.cc', ['ping.pb.cc', 'ping.pb.h']);
	protobuf = Builder(action = 'cd ${SOURCE.dir} && /miru/projects/protobuf/protobuf-2.1.0/src/protoc ${SOURCE.file} --cpp_out=../${TARGET.dir}')
	ge.Append(BUILDERS = {'Protobuf' : protobuf})
	ge.Protobuf('ping.pb.cc', 'ping.proto')
	ge.Program(['pgmping.cc', 'ping.pb.cc', '/miru/projects/protobuf/protobuf-2.1.0/src/.libs/libprotobuf.a'])


# end of file
